#!/usr/bin/env python

import os
from os.path import expanduser
import sys
import configparser
import requests
from optparse import OptionParser
import argparse

HOME = expanduser("~")
config = configparser.ConfigParser()
DEFAULT = 'default'

if DEFAULT in config:
    BACKLOG_API_KEY = config[DEFAULT]
else:
    BACKLOG_API_KEY = None

path = HOME + '/.bl'
conffile = path + '/credentials'
if not os.path.exists(path):
    os.makedirs(path)
if not os.path.isdir(path):
    sys.exit(f'Path {path} is not a directory. Please make sure the path is a directory.')

config.read(conffile)

def command_configure(args):
    try:
        print("Please input your configuration name(default): ")
        config_name = input()
        global DEFAULT
        if config_name is '':
            config_name = DEFAULT
        global config

        print("Please input your backlog url: ")
        base_url = input()
        print("Please input your backlog access key: ")
        access_key = input()

        config[config_name] = {
            'base_url':base_url,
            'access_key': access_key,
        }

        global conffile
        with open(conffile, 'w') as f:
            config.write(f)
        with open(conffile, 'r') as f:
            print('''
Your configuration flie {filepath} is below.
            '''.format(filepath=conffile)
            )
            print(f.read())
            
    except KeyboardInterrupt:
        print("Configuration dialogue has stopped.")

def command_wiki(args):
    print(BACKLOG_API_KEY)

def command_help(args):
    print(parser.parse_args([args.command, '--help']))

# 渡された引数やサブコマンドなどをパース
parser = argparse.ArgumentParser(description='Backlog command line interface')
subparsers = parser.add_subparsers()

parser_configure = subparsers.add_parser('configure', help='see `configure -h`')
parser_configure.add_argument('-n', '--name', metavar='NAME', help='name of configuration', default='default')
parser_configure.add_argument('-o', '--output', dest='output',
        help='OUTPUT is output path of configuration file',
        metavar='OUTPUT')
parser_configure.set_defaults(handler=command_configure)

parser_wiki = subparsers.add_parser('wiki', help='see `wiki -h`')
parser_wiki.add_argument('-L', '--list', action='store_true', help='List all wiki pages')
parser_wiki.set_defaults(handler=command_wiki)

parser_help = subparsers.add_parser('help', help='see `help -h`')
parser_help.add_argument('command', help='command name which help is shown')
parser_help.set_defaults(handler=command_help)

args = parser.parse_args()
if hasattr(args, 'handler'):
    args.handler(args)
else:
    parser.print_help()

